df <- rbind(df, varies_df)
head(df)
unique(df$installs)
# removing ',' from the numbers
df$installs_numeric <-str_replace_all(df$installs, c( "," = "" ))
#including only numbers
df$installs_numeric <-  gsub("[^0-9A-Za-z///' ]","" , df$installs_numeric,ignore.case = TRUE)
# changing the values from string to numeric value
df$installs_numeric <- as.numeric(df$installs_numeric,scientific = FALSE)
# assigning factor to installs
df$installs <- factor(df$installs, levels = c( "0+",
"1+",
"5+",
"10+",
"50+",
"100+",
"500+",
"1,000+",
"5,000+",
"10,000+",
"50,000+",
"100,000+",
"500,000+",
"1,000,000+",
"5,000,000+",
"10,000,000+",
"50,000,000+",
"100,000,000+",
"500,000,000+",
"1,000,000,000+"))
df %>%
select(installs) %>%
group_by(installs) %>%
summarise(no_apps = n()) %>%
mutate(freq = formattable::percent(no_apps / sum(no_apps), 2)) %>%
arrange(desc(no_apps))
df %>%
count(installs) %>%
mutate(freq = formattable::percent(n / sum(n), 2)) %>%
plot_ly(x = ~installs, y = ~n, color = ~installs,
hovertemplate = ~paste("installs:", installs, "<br>",
"Number of Installs:", n, "<br>",
"Percentage:", freq)) %>%
add_bars(showlegend = FALSE) %>%
layout(xaxis = list(title = FALSE),
yaxis = list(title = "Number of Observations"),
title= 'What App installs is the most common?')
# converting last_review to a date format
# converting 'November 18, 2016' using "%B %d, %Y" format to change into '2020-11-18'
df$last.updated <- as.Date(df$last.updated, "%B %d, %Y" )
str(df$last.update)
collected_date = 'December 31, 2021'
collected_date <- as.Date(collected_date, "%B %d, %Y" )
# Duration
df <- df %>%
mutate(update_ago = collected_date - last.updated)
head(df)
unique(df$category)
# Changing '_AND _' in genre to
df$category <- str_replace_all(df$category, c("_AND_" = " & ", "," = ""))
# changing column names to capitalisation
df$category <- str_to_title(df$category)
unique(df$category)
# changign the variable from timediff to numeric to be able to draw the density curve
df$update_ago <- as.numeric(df$update_ago)
x <- df$update_ago
fit <- density(x)
plot_ly(x = x, type = "histogram", name = "Histogram") %>%
add_trace(x = fit$x, y = fit$y, type = "scatter", mode = "lines", fill = "tozeroy", yaxis = "y2", name = "Density") %>%
layout(yaxis2 = list(overlaying = "y", side = "right"))
colSums(is.na(df))
df <-  df %>%
select(everything()) %>%
mutate(rating_missing = if_else(rating == 'NaN', 'missing rating', 'rating'))
# assigning factor to rating_missing
df$rating_missing <- as.factor(df$rating_missing)
df %>%
select(rating_missing, rating) %>%
group_by(rating_missing) %>%
summarise(no_apps = n()) %>%
mutate(freq = formattable::percent(no_apps / sum(no_apps), 2)) %>%
arrange(desc(no_apps))
df %>%
count(rating_missing) %>%
mutate(rating_missing = fct_reorder(rating_missing, n, .desc = TRUE), freq = formattable::percent(n / sum(n), 2)) %>%
plot_ly(x = ~rating_missing, y = ~n, color = ~rating_missing,
hovertemplate = ~paste("Type:", rating_missing, "<br>",
"Number of Observations:", n, "<br>",
"Percentage:", freq)) %>%
add_bars(showlegend = FALSE,colors = missing_colors) %>%
layout(xaxis = list(title = FALSE),
yaxis = list(title = "Number of Observations"),
title= 'How many rating are missing?')
fig <- plot_ly()
fig <- fig %>% add_pie(data = count(df,rating_missing), labels = ~rating_missing, values = ~n,
textinfo='label+percent',
insidetextorientation='horizontal',
title = 'How many apps are missing rating?',
marker = list(colors = c("#D62728", "#316395"),
line = list(color = '#FFFFFF', width = 1)))
fig
df %>%
count(rating_missing, category) %>%
mutate(rating_missing = fct_reorder(rating_missing, n, .desc = TRUE), freq = formattable::percent(n / sum(n), 2)) %>%
plot_ly(y = ~category, x = ~n, color = ~rating_missing,
hovertemplate = ~paste("Type:", rating_missing, "<br>",
"Category:", category, "<br>",
"Number of Observations:", n, "<br>",
"Percentage:", freq)) %>%
add_bars(showlegend = FALSE, colors = missing_colors) %>%
layout(xaxis = list(title = FALSE),
yaxis = list(title = "Number of Observations"),
title= 'How many rating are missing?')
summary_rating_missing <- df %>%
select(category,rating_missing) %>%
group_by(category, rating_missing) %>%
summarise(no_apps = n()) %>%
mutate(freq = formattable::percent(no_apps / sum(no_apps), 2))
summary_rating_missing %>%
plot_ly(y = ~category, x = ~freq, color = ~rating_missing,
hovertemplate = ~paste("Category:", category, "<br>",
"Type:", rating_missing, "<br>",
"Percentage:", freq,"<br>",
"Number of Observations:", no_apps)) %>%
add_bars(showlegend = FALSE, colors = c("#D62728", "#316395")) %>%
layout(yaxis = list(title = FALSE),
xaxis = list(title = "Percentage"),
title= 'What is the percentage of categories that have missing rating?',
barmode = 'stack')
# filtering our all observations that do not have a rating
df <- df %>%
filter(rating != 'NaN')
summary(df$rating)
# changing the values from string to numeric value
df$rating <- as.numeric(df$rating)
x <- df$rating
fit <- density(x)
plot_ly(x = x, type = "histogram", name = "Histogram") %>%
add_trace(x = fit$x, y = fit$y, type = "scatter", mode = "lines", fill = "tozeroy", yaxis = "y2", name = "Density") %>%
layout(yaxis2 = list(overlaying = "y", side = "right"))
unique(df$price)
# create new dataset where type is 'PAID'
paid_df <-  df %>%
filter(type =='Paid')
# examining all the unique price in paid datagrame
head(paid_df)
unique(paid_df$price)
# removing '$' from the price
paid_df$price <- substring(paid_df$price, 2)
# changing the values from string to numeric value
paid_df$price <- as.numeric(paid_df$price)
unique(paid_df$price)
x <- paid_df$price
fit <- density(x)
plot_ly(x = x, type = "histogram", name = "Histogram") %>%
add_trace(x = fit$x, y = fit$y, type = "scatter", mode = "lines", fill = "tozeroy", yaxis = "y2", name = "Density") %>%
layout(yaxis2 = list(overlaying = "y", side = "right"))
# create new dataset where type is free
free_df <-  df %>%
filter(type =='Free')
# changing the values from string to numeric value
free_df$price <- as.numeric(free_df$price)
# examining all the unique price in free datagrame
unique(free_df$price)
# # filtering by Nan
# df %>%
#   filter(type =='NaN')
# merging  the two data frames together
# NaN was not added
# the symbol '$' was removed
df <- rbind(paid_df, free_df)
head(df)
str(df)
df %>%
select(category) %>%
group_by(category) %>%
summarise(no_apps = n()) %>%
mutate(freq = formattable::percent(no_apps / sum(no_apps), 2)) %>%
arrange(desc(no_apps))
df %>%
count(category) %>%
mutate(category = fct_reorder(category, n, .desc = FALSE), freq = formattable::percent(n / sum(n), 2)) %>%
plot_ly(y = ~category, x = ~n, color = ~category,
hovertemplate = ~paste("Category:", category, "<br>",
"Number of Category:", n, "<br>",
"Percentage:", freq)) %>%
add_bars(showlegend = FALSE, colors = cont_colors ) %>%
layout(yaxis = list(title = FALSE),
xaxis = list(title = "Number of Observations"),
title= 'What category has the most apps?')
df %>%
select(category, rating) %>%
group_by(category) %>%
summarise(no_apps = n(),
min_rating = min(rating),
median_rating = median(rating),
mean_rating = mean(rating),
max_rating = max(rating)) %>%
mutate(freq = formattable::percent(no_apps / sum(no_apps), 2)) %>%
arrange(desc(no_apps))
plot_ly(df, y = ~category, x = ~rating) %>%
add_boxplot(color = ~category) %>%
layout(yaxis = list(title = "Category"),
xaxis = list(title = "Rating"),
title = "Rating for Each Category")%>%
hide_legend()
df %>%
select(category, installs_numeric) %>%
group_by(category) %>%
summarise(no_apps = n(),
min_installs = min(installs_numeric),
median_installs = median(installs_numeric),
mean_installs = mean(installs_numeric),
max_installs = max(installs_numeric),
sum_installs = sum(installs_numeric)
) %>%
mutate(freq = formattable::percent(no_apps / sum(no_apps), 2)) %>%
arrange(desc(sum_installs))
sum_installs <-  df %>%
select(category, installs_numeric) %>%
group_by(category) %>%
summarise(sum_installs = sum(installs_numeric)) %>%
arrange(desc(sum_installs))
sum_installs %>%
plot_ly(x = ~sum_installs,
y = ~category,
color = ~category,
hovertemplate = ~paste("Category:", category, "<br>",
"Sum of Installs:", sum_installs)) %>%
add_bars(showlegend=FALSE,) %>%
layout(yaxis = list(title = FALSE, categoryorder = "total ascending"),
xaxis = list(title = "Number of App Downloads"),
title='What category is downloaded the most?')
df %>%
select(type) %>%
group_by(type) %>%
summarise(no_apps = n()) %>%
mutate(freq = formattable::percent(no_apps / sum(no_apps), 2)) %>%
arrange(desc(no_apps))
fig <- plot_ly()
fig <- fig %>% add_pie(data = count(df, type), labels = ~type, values = ~n,
textinfo='label+percent',
insidetextorientation='horizontal',
title = 'How many apps are paid?',
marker = list(colors = type_colors,
line = list(color = '#FFFFFF', width = 1)))
fig
df %>%
select(category, type) %>%
group_by(category, type) %>%
summarise(no_apps = n()) %>%
mutate(freq = formattable::percent(no_apps / sum(no_apps), 2))
summary_type <- df %>%
select(category, type) %>%
group_by(category, type) %>%
summarise(no_apps = n()) %>%
mutate(freq = formattable::percent(no_apps / sum(no_apps), 2))
summary_type %>%
plot_ly(y = ~category, x = ~freq, color = ~type,
hovertemplate = ~paste("Category:", category, "<br>",
"Type:", type, "<br>",
"Percentage:", freq, "<br>",
"Number of Observations:", no_apps)) %>%
add_bars(showlegend = FALSE, colors = type_colors) %>%
layout(yaxis = list(title = FALSE),
xaxis = list(title = "Percentage"),
title= 'How many apps are paid in each category?',
barmode = 'stack')
df %>%
select(content.rating) %>%
group_by(content.rating) %>%
summarise(no_apps = n()) %>%
mutate(freq = formattable::percent(no_apps / sum(no_apps), 2)) %>%
arrange(desc(no_apps))
df %>%
count(content.rating) %>%
mutate(content.rating = fct_reorder(content.rating, n, .desc = TRUE), freq = formattable::percent(n / sum(n), 2)) %>%
plot_ly(x = ~content.rating, y = ~n, color = ~content.rating,
hovertemplate = ~paste("Content Type:", content.rating, "<br>",
"Number of Content Type:", n, "<br>",
"Percentage:", freq)) %>%
add_bars(showlegend = FALSE) %>%
layout(xaxis = list(title = FALSE),
yaxis = list(title = "Number of Observations"),
title= 'What Content Rating is the most common?')
fig <- plot_ly()
fig <- fig %>% add_pie(data = count(df,content.rating), labels = ~content.rating, values = ~n,
textinfo='label+percent',
insidetextorientation='horizontal',
title = 'What Content Rating is the most common?',
marker = list(
colors = c('lightblue','blue',  'lightblue', 'lightblue'),
line = list(color = '#FFFFFF', width = 1)))
fig
# examining the mean and the max or price for each category
paid_df %>%
select(category, price, rating) %>%
group_by(category) %>%
summarise(no_paid_apps = n(),
min_price = min(price),
median_price = median(price),
mean_price = mean(price),
max_price = max(price)) %>%
arrange(desc(no_paid_apps))
# examining the mean and the max or price for each category
paid_df %>%
select(content.rating, price, rating) %>%
group_by(content.rating) %>%
summarise(no_paid_apps = n(),
min_price = min(price),
median_price = median(price),
mean_price = mean(price),
max_price = max(price)) %>%
arrange(desc(no_paid_apps))
plot_ly(paid_df, y = ~content.rating, x = ~price) %>%
add_boxplot(color = ~content.rating) %>%
layout(yaxis = list(title = "Content"),
xaxis = list(title = "Price"),
title = "Which content is the priciest?")%>%
hide_legend()
# examining the mean and the max or price for each category
df %>%
select(category, type, rating) %>%
group_by(category, type) %>%
summarise(no_apps = n(),
min_rating = min(rating),
median_rating = median(rating),
mean_rating = mean(rating),
max_rating = max(rating))
summary_category_type_rating_df <-df %>%
select(category, type, rating) %>%
group_by(category, type) %>%
summarise(no_apps = n(),
min_rating = min(rating),
median_rating = median(rating),
mean_rating = round(mean(rating),2),
max_rating = max(rating))
summary_category_type_rating_df %>%
group_by(category) %>%
do(p=plot_ly(., x = ~category, y = ~mean_rating, color = ~type, type = "bar", marker = list(color = type_colors),
hovertemplate = ~paste("Category:", category, "<br>",
"Type:", type, "<br>",
"Mean Rating:", mean_rating)
)) %>%
subplot(nrows = 5,  shareY = TRUE) %>%
layout(yaxis = list(title = FALSE),
xaxis = list(title = FALSE),
title= 'Which apps have higher rating: free apps or paid apps?',
showlegend= FALSE,
autosize = F, width = 1000, height = 1000)
sum_installs <-  df %>%
select(category, installs_numeric) %>%
group_by(category) %>%
summarise(sum_installs = sum(installs_numeric)) %>%
arrange(desc(sum_installs))
sum_installs %>%
plot_ly(x = ~sum_installs,
y = ~category,
color = ~category,
hovertemplate = ~paste("Category:", category, "<br>",
"Sum of Installs:", sum_installs)) %>%
add_bars(showlegend=FALSE, colors = cont_colors ) %>%
layout(yaxis = list(title = FALSE, categoryorder = "total ascending"),
xaxis = list(title = "Number of App Downloads"),
title='What category is downloaded the most?')
summary_category_type_rating_df %>%
group_by(category) %>%
do(p=plot_ly(., x = ~category, y = ~mean_rating, color = ~type, type = "bar", marker = list(color = type_colors),
hovertemplate = ~paste("Category:", category, "<br>",
"Type:", type, "<br>",
"Mean Rating:", mean_rating)
)) %>%
subplot(nrows = 5,  shareY = TRUE) %>%
layout(yaxis = list(title = FALSE),
xaxis = list(title = FALSE),
title= 'Which apps have higher rating: free apps or paid apps?',
showlegend= FALSE,
autosize = F, width = 1000, height = 1000)
df %>%
select(content.rating, type) %>%
group_by(content.rating, type) %>%
summarise(no_apps = n()) %>%
mutate(freq = formattable::percent(no_apps / sum(no_apps), 2))
summary_type <- df %>%
select(content.rating, type) %>%
group_by(content.rating, type) %>%
summarise(no_apps = n()) %>%
mutate(freq = formattable::percent(no_apps / sum(no_apps), 2))
summary_type %>%
plot_ly(y = ~content.rating, x = ~freq, color = ~type,
hovertemplate = ~paste("content.rating:", content.rating, "<br>",
"Type:", type, "<br>",
"Percentage:", freq, "<br>",
"Number of Observations:", no_apps)) %>%
add_bars(showlegend = FALSE, colors = type_colors) %>%
layout(yaxis = list(title = FALSE),
xaxis = list(title = "Percentage"),
title= 'How many apps are paid in each content.rating?',
barmode = 'stack')
fig <- plot_ly()
fig <- fig %>% add_pie(data = count(df,content.rating), labels = ~content.rating, values = ~n,
textinfo='label+percent',
insidetextorientation='horizontal',
title = 'What Content Rating is the most common?',
marker = list(
colorscale = c('lightblue','blue'),
line = list(color = '#FFFFFF', width = 1)))
fig
fig <- plot_ly()
fig <- fig %>% add_pie(data = count(df,content.rating), labels = ~content.rating, values = ~n,
textinfo='label+percent',
insidetextorientation='horizontal',
title = 'What Content Rating is the most common?',
marker = list(
colorscale = c('lightblue','blue',  'lightblue', 'lightblue'),
line = list(color = '#FFFFFF', width = 1)))
fig
plot_ly(df, y = ~category, x = ~price) %>%
add_boxplot(color = ~category) %>%
layout(yaxis = list(title = "Category"),
xaxis = list(title = "Price"),
title = "Price for Each Category")%>%
hide_legend()
plot_ly(paid_df, y = ~category, x = ~price) %>%
add_boxplot(color = ~category) %>%
layout(yaxis = list(title = "Category"),
xaxis = list(title = "Price"),
title = "Price for Each Category")%>%
hide_legend()
finance <-  df %>%
filter(category == 'Finance')
fig <- plot_ly()
fig <- fig %>% add_histogram(x = ~finance$price)
fig
finance <-  df %>%
filter(category == 'Lifestyle')
fig <- plot_ly()
fig <- fig %>% add_histogram(x = ~finance$price)
fig
# examining the mean and the max or price for each category
paid_df %>%
select(category, price, rating) %>%
group_by(category) %>%
summarise(no_paid_apps = n(),
min_price = min(price),
median_price = median(price),
mean_price = mean(price),
max_price = max(price)) %>%
arrange(desc(median_price))
df %>%
filter(price < 50)
df %>%
filter(price > 50)
#installing necessary package
if (!require("ggplot2")) install.packages("ggplot2")
if (!require("dplyr")) install.packages("dplyr")
if (!require("stringr")) install.packages("stringr")
if (!require("knitr")) install.packages("knitr")
if (!require("plotly")) install.packages("plotly")
if (!require("forcats")) install.packages("forcats")
if (!require("crosstalk")) install.packages("crosstalk")
if (!require("stringr")) install.packages("stringr")
if (!require("formattable")) install.packages("formattable")
if (!require("reshape")) install.packages("reshape")
library(reshape)
library(ggplot2)
library(dplyr)
library(stringr)
library(knitr)
library(plotly)
library(forcats)
library(crosstalk)
library(stringr)
library(formattable)
update.packages(ask = FALSE)
knitr::opts_chunk$set(echo = TRUE)
#installing necessary package
if (!require("ggplot2")) install.packages("ggplot2")
if (!require("dplyr")) install.packages("dplyr")
if (!require("stringr")) install.packages("stringr")
if (!require("knitr")) install.packages("knitr")
if (!require("plotly")) install.packages("plotly")
install.packages("dplyr")
knitr::opts_chunk$set(echo = TRUE)
#installing necessary package
if (!require("ggplot2")) install.packages("ggplot2")
if (!require("dplyr")) install.packages("dplyr")
if (!require("stringr")) install.packages("stringr")
if (!require("knitr")) install.packages("knitr")
if (!require("plotly")) install.packages("plotly")
knitr::opts_chunk$set(echo = TRUE)
#installing necessary package
if (!require("ggplot2")) install.packages("ggplot2")
if (!require("dplyr")) install.packages("dplyr")
if (!require("stringr")) install.packages("stringr")
if (!require("knitr")) install.packages("knitr")
if (!require("plotly")) install.packages("plotly")
if (!require("forcats")) install.packages("forcats")
if (!require("crosstalk")) install.packages("crosstalk")
if (!require("stringr")) install.packages("stringr")
if (!require("formattable")) install.packages("formattable")
if (!require("reshape")) install.packages("reshape")
library(reshape)
library(ggplot2)
install.packages("dplyr")
knitr::opts_chunk$set(echo = TRUE)
#installing necessary package
if (!require("ggplot2")) install.packages("ggplot2")
if (!require("dplyr")) install.packages("dplyr")
if (!require("stringr")) install.packages("stringr")
if (!require("knitr")) install.packages("knitr")
if (!require("plotly")) install.packages("plotly")
